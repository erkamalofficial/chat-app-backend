{"version":3,"sources":["events.js","components/ChatsPage/Sidebar.js","components/ChatsPage/MessageHeader.js","components/ChatsPage/MessagesBody.js","helpers/ChatHalper.js","components/ChatsPage/MessageInput.js","components/ChatsPage/ChatPage.js","components/LoginPage/LoginPage.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","IS_USER","NEW_USER","INIT_CHATS","LOGOUT","MESSAGE_SEND","TYPING","P_MESSAGE_SEND","P_TYPING","CHECK_CHANNEL","CREATE_CHANNEL","Sidebar","_Component","_getPrototypeOf2","_this","Object","classCallCheck","this","_len","arguments","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","apply","concat","state","modal","channelName","channelDescription","error","displayChannels","chats","map","chat","react_default","a","createElement","Menu","Item","key","name","onClick","props","setActiveChannel","active","activeChannel","msgCount","Label","size","color","displayUsers","users","_this$props","user","setActivePChannel","pChats","nickname","assign","You...","keys","pChat","filter","pchat","toUpperCase","slice","react_dots_loader_lib_default","style","marginLeft","distance","visible","isTyping","openModal","setState","closeModal","handleChange","e","defineProperty","target","value","isFormValid","_ref","handleSubmit","_this$state","socket","emit","events","checkChannel","isChannel","inherits","createClass","_this$props2","logout","_this$state2","Fragment","background","paddingTop","vertical","inverted","fluid","stackable","Header","as","Icon","Content","Subheader","paddingLeft","fontSize","Button","icon","labelPosition","Modal","open","content","Form","Field","Input","placeholder","onChange","Message","Actions","Component","MessageHeader","Segment","description","MessagesBody","scrollDown","b","contaniner","refs","scrollTop","scrollHeight","messages","typingUser","height","ref","overflowY","minHeight","display","flexDirection","justifyContent","padding","paddingRight","message","Card","id","marginTop","textAlign","sender","moment","timef","fromNow","className","configuration","Configuration","apiKey","openai","OpenAIApi","getResponseFromchatBot","createCompletion","model","prompt","max_tokens","temperature","MessageInput","msg","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","includes","sent","sendMsg","data","choices","text","abrupt","stop","handleOnFocused","sendTyping","handleOnBlur","onSubmit","onFocus","onBlur","link","circular","disabled","ChatPage","initChats","_chats","updateChats","init","undefined","newChats","toConsumableArray","addTyping","channel","push","u","addPTyping","_ref2","console","log","addMessage","_ref3","addPMessage","_ref4","type","receiver","socketId","newActive","on","_this$props3","Grid","margin","Column","computer","tablet","mobile","ChatsPage_Sidebar","ChatsPage_MessageHeader","ChatsPage_MessagesBody","ChatsPage_MessageInput","LoginPage","isvalid","setUser","isUser","event","verticalAlign","autoFocus","negative","socketUrl","Main","initSocket","io","setUsers","isNewUsers","newUsers","outUser","newPChats","oldPChats","newUser","ChatsPage_ChatPage","components_LoginPage_LoginPage","App","components_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ccda151c.chunk.js","sourcesContent":["module.exports = {\r\n    IS_USER:\"IS_USER\",\r\n    NEW_USER:\"NEW_USER\",\r\n    INIT_CHATS:\"INIT_CHATS\",\r\n    LOGOUT:\"LOGOUT\",\r\n    MESSAGE_SEND:\"MESSAGE_SEND\",\r\n    TYPING:\"TYPING\", \r\n    P_MESSAGE_SEND:\"P_MESSAGE_SEND\",\r\n    P_TYPING:\"P_TYPING\",\r\n    CHECK_CHANNEL:\"CHECK_CHANNEL\",\r\n    CREATE_CHANNEL:\"CREATE_CHANNEL\"\r\n}","import React, { Component } from 'react'\r\nimport events from '../../events'\r\nimport { Menu, Header, Icon, Button, Label, Modal, Form, Input, Message } from 'semantic-ui-react'\r\nimport Loader from 'react-dots-loader'\r\nimport 'react-dots-loader/index.css'\r\n\r\nexport class Sidebar extends Component {\r\n\r\n  state = {\r\n    modal: false,\r\n    channelName: '',\r\n    channelDescription: '',\r\n    error: null\r\n  }\r\n\r\n  displayChannels = chats => (\r\n    chats.map(chat => (\r\n      <Menu.Item\r\n        key={chat.name}\r\n        onClick={() => this.props.setActiveChannel(chat.name)}\r\n        active={this.props.activeChannel.name === chat.name}\r\n      >\r\n        # {chat.name}\r\n        {chat.msgCount > 0 && <Label size='mini' color='red'> {chat.msgCount} </Label>}\r\n      </Menu.Item>\r\n    ))\r\n  )\r\n\r\n  displayUsers = users => {\r\n    let { user, setActivePChannel, pChats, activeChannel } = this.props\r\n    delete users[user.nickname]\r\n    users = Object.assign({ 'You...': user }, users)\r\n    return Object.keys(users).map(user => {\r\n      let pChat = pChats.filter(pchat => pchat.name === user)\r\n      let msgCount = null\r\n      if (pChat[0] && pChat[0].name !== activeChannel.name) {\r\n        if (pChat[0].msgCount > 0) {\r\n          msgCount = pChat[0].msgCount\r\n        }\r\n      }\r\n      return (\r\n        <Menu.Item\r\n          key={user}\r\n          onClick={(user === 'You...') ? null : () => setActivePChannel(user)}\r\n          active={this.props.activeChannel.name === user}\r\n        >\r\n          # {user[0].toUpperCase() + user.slice(1)}\r\n          <Loader\r\n            style={{ marginLeft: '10px' }}\r\n            size={4} color='grey' distance={3}\r\n            visible={pChat[0] ? pChat[0].isTyping : false} />\r\n          {msgCount && <Label size='mini' color='red'> {msgCount} </Label>}\r\n        </Menu.Item>\r\n      )\r\n    })\r\n  }\r\n\r\n  openModal = () => this.setState({ modal: true })\r\n\r\n  closeModal = () => this.setState({ modal: false, channelName: '', channelDescription: '', error: null })\r\n\r\n  handleChange = e => this.setState({ [e.target.name]: e.target.value })\r\n\r\n  isFormValid = ({ channelDescription, channelName }) => {\r\n    if (channelDescription && channelName) {\r\n      this.setState({ error: null })\r\n      return true\r\n    } else {\r\n      this.setState({ error: 'Both Name and Description are require ' })\r\n      return false\r\n    }\r\n  }\r\n\r\n  handleSubmit = () => {\r\n    this.setState({ error: null })\r\n    let { channelDescription, channelName } = this.state\r\n    if (this.isFormValid(this.state)) {\r\n      let { socket } = this.props\r\n      socket.emit(events.CHECK_CHANNEL, { channelName, channelDescription }, this.checkChannel)\r\n    }\r\n  }\r\n\r\n  checkChannel = isChannel => {\r\n    isChannel ? this.setState({ error: `Channel \"${ this.state.channelName }\" name alredy take` }) :\r\n    this.closeModal()\r\n  }\r\n\r\n  render() {\r\n    let { user, users, chats, logout } = this.props\r\n    let { modal, error } = this.state\r\n    return (\r\n      <React.Fragment>\r\n        <Menu\r\n          style={{ background: '#4c3c4c', paddingTop: '2em' }}\r\n          vertical\r\n          inverted\r\n          fluid\r\n          stackable\r\n          size='large'\r\n        >\r\n\r\n          <Header inverted as='h3'>\r\n            <Icon name='chat' />\r\n            <Header.Content> Simple Chat </Header.Content>\r\n            <Header.Subheader>\r\n              Login as : {user.nickname[0].toUpperCase() + user.nickname.slice(1)}\r\n            </Header.Subheader>\r\n          </Header>\r\n          <Menu.Menu>\r\n            <Menu.Item style={{ paddingLeft: '0' }}>\r\n              <span style={{ fontSize: '1.2em' }}>\r\n                <Icon name='bullhorn' /> Channel lists\r\n              </span>\r\n              <Icon name='add' onClick={this.openModal} />\r\n            </Menu.Item>\r\n            {chats[0] && this.displayChannels(chats)}\r\n          </Menu.Menu>\r\n          <br />\r\n          <Menu.Menu>\r\n            <Menu.Item style={{ paddingLeft: '0' }}>\r\n              <span style={{ fontSize: '1.2em' }}>\r\n                <Icon name='address book' /> Online Users\r\n              </span>\r\n            </Menu.Item>\r\n            {(users && chats[0]) && this.displayUsers(users)}\r\n          </Menu.Menu>\r\n          <br />\r\n          <Menu.Menu>\r\n            <Menu.Item style={{ paddingLeft: '0' }}>\r\n              <Button\r\n                icon\r\n                inverted\r\n                labelPosition='right'\r\n                onClick={logout}\r\n              >\r\n                <Icon name='sign-out alternate' />\r\n                LogOut\r\n              </Button>\r\n            </Menu.Item>\r\n          </Menu.Menu>\r\n        </Menu>\r\n        <Modal open={modal} size='small'  >\r\n          <Header icon='bullhorn' content='Add new Channel' />\r\n          <Modal.Content>\r\n            <Form>\r\n              <Form.Field>\r\n                <Input\r\n                  placeholder='Channel Name'\r\n                  name='channelName'\r\n                  onChange={this.handleChange}\r\n                />\r\n              </Form.Field>\r\n              <Form.Field>\r\n                <Input\r\n                  name='channelDescription'\r\n                  placeholder='Channel Description'\r\n                  onChange={this.handleChange}\r\n                />\r\n              </Form.Field>\r\n            </Form>\r\n            {\r\n              error && (\r\n                <Message error >\r\n                  <h4>Error</h4>\r\n                  {this.state.error}\r\n                </Message>\r\n              )\r\n            }\r\n          </Modal.Content>\r\n          <Modal.Actions>\r\n            <Button color='red' inverted onClick={this.closeModal}>\r\n              <Icon name='remove' /> Cancel\r\n            </Button>\r\n            <Button color='green' inverted onClick={this.handleSubmit}>\r\n              <Icon name='checkmark' /> Add\r\n            </Button>\r\n          </Modal.Actions>\r\n        </Modal>\r\n      </React.Fragment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Sidebar\r\n","import React, { Component } from 'react'\r\nimport { Segment, Header, Icon } from 'semantic-ui-react';\r\n\r\nexport class MessageHeader extends Component {\r\n  render() {\r\n    let { activeChannel } = this.props\r\n    return (\r\n      <Segment>\r\n        <Header as=\"h2\">\r\n          <Icon name=\"bullhorn\" />\r\n          <Header.Content>{ activeChannel.name[0].toUpperCase() + activeChannel.name.slice(1) }</Header.Content>\r\n          <Header.Subheader>\r\n            Description : <span>{activeChannel.description[0].toUpperCase() + activeChannel.description.slice(1)}</span>\r\n          </Header.Subheader>\r\n        </Header>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageHeader\r\n","import React, { Component } from 'react'\r\nimport { Segment, Card } from 'semantic-ui-react';\r\nimport moment from 'moment'\r\n\r\nexport class MessagesBody extends Component {\r\n\r\n  componentDidMount(){\r\n    this.scrollDown()\r\n  }\r\n  \r\n  componentDidUpdate( a, b ){\r\n    this.scrollDown()\r\n  }\r\n\r\n  scrollDown(){\r\n    const { contaniner } = this.refs\r\n    contaniner.scrollTop = contaniner.scrollHeight\r\n  }\r\n\r\n  render() {\r\n    let { messages , user, typingUser } = this.props\r\n    return (\r\n      <Segment style={{ height: 'calc( 100vh - 56px - 147px)'}}>\r\n        <div ref='contaniner' style={{  height:'calc( 100vh - 56px - 147px - 35px)', overflowY: 'auto'}}>\r\n          <div style={{ minHeight: '100%', display: 'flex', flexDirection: 'column', justifyContent: 'flex-end', padding: '.1em', paddingRight: '.5em' }}>\r\n            {\r\n              messages.length > 0 && (\r\n                messages.map( message => (\r\n                  <Card key={ message.id } fluid style={{ marginTop: '0px'}}>\r\n                    <Card.Content\r\n                      style={{ padding: '3px 10px' }} \r\n                      textAlign={ message.sender === user.nickname ? 'right' : 'left' }>\r\n                      <h3>{message.message}</h3>\r\n                      {message.sender[0].toUpperCase() + message.sender.slice(1)} Send @ { moment(message.timef).fromNow()}\r\n                    </Card.Content>\r\n                  </Card>\r\n                ))\r\n              )\r\n            }\r\n            { \r\n              typingUser && typingUser.map( name => (\r\n                <div key={name} className=\"typing-user\">\r\n\t\t\t\t\t\t\t\t\t{`${name[0].toUpperCase() + name.slice(1)} is typing . . .`}\r\n\t\t\t\t\t\t\t\t</div>\r\n              ))\r\n            }\r\n          </div>\r\n        </div>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessagesBody\r\n","import { Configuration, OpenAIApi } from 'openai';\r\n\r\nconst configuration = new Configuration({\r\n    apiKey: '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',\r\n});\r\nconst openai = new OpenAIApi(configuration);\r\n\r\n\r\nexport const getResponseFromchatBot = (message) => openai.createCompletion({\r\n    model: \"text-davinci-003\",\r\n    prompt: message,\r\n    max_tokens: 1000,\r\n    temperature: 0,\r\n});","import React, { Component } from 'react'\r\nimport { Segment, Form, Icon } from 'semantic-ui-react';\r\nimport { createCompletion, getResponseFromchatBot } from '../../helpers/ChatHalper';\r\n\r\nexport class MessageInput extends Component {\r\n  state = {\r\n    msg: ''\r\n  }\r\n\r\n  handleChange = e => this.setState({ msg: e.target.value })\r\n\r\n  handleSubmit = async() => {\r\n    if (this.state.msg.includes('@ElloGPT')) {\r\n      const response = await getResponseFromchatBot(this.state.msg); \r\n      this.props.sendMsg(response.data.choices[0].text)\r\n      this.setState({ msg: '' })\r\n      return\r\n    } else {\r\n      this.props.sendMsg(this.state.msg)\r\n      this.setState({ msg: '' })\r\n    }\r\n\r\n  }\r\n\r\n  handleOnFocused = () => this.props.sendTyping(true)\r\n\r\n  handleOnBlur = () => this.props.sendTyping(false)\r\n\r\n  render() {\r\n    let { msg } = this.state\r\n    return (\r\n      <Segment>\r\n        <Form onSubmit={msg.length > 0 ? this.handleSubmit : null}>\r\n          <Form.Input\r\n            fluid\r\n            name='msg'\r\n            value={msg}\r\n            placeholder='Write your message 2'\r\n            onChange={this.handleChange}\r\n            onFocus={this.handleOnFocused}\r\n            onBlur={this.handleOnBlur}\r\n            icon={<Icon\r\n              name='send'\r\n              link\r\n              circular\r\n              inverted\r\n              onClick={this.handleSubmit}\r\n              disabled={msg.length < 1}\r\n            />}\r\n          />\r\n        </Form>\r\n      </Segment>\r\n    )\r\n  }\r\n}\r\n\r\nexport default MessageInput\r\n","import React, { Component } from 'react'\r\nimport events from '../../events'\r\nimport { Grid } from 'semantic-ui-react'\r\nimport Sidebar from './Sidebar';\r\nimport MessageHeader from './MessageHeader'\r\nimport MessagesBody from './MessagesBody'\r\nimport MessageInput from './MessageInput'\r\n\r\n\r\nexport class ChatPage extends Component {\r\n\r\n  state = {\r\n    chats: [],\r\n    activeChannel: null\r\n  }\r\n\r\n  componentDidMount(){\r\n    let { socket } = this.props\r\n    socket.emit(events.INIT_CHATS, this.initChats )\r\n    socket.on( events.MESSAGE_SEND, this.addMessage )\r\n    socket.on( events.TYPING, this.addTyping )\r\n    socket.on( events.P_MESSAGE_SEND, this.addPMessage )\r\n    socket.on( events.P_TYPING, this.addPTyping)\r\n    socket.on( events.CREATE_CHANNEL, this.updateChats )\r\n  }\r\n\r\n  initChats =  _chats  => this.updateChats( _chats, true )\r\n  \r\n  updateChats = ( _chats, init=false ) => {\r\n    let { chats } = this.state\r\n    let newChats = init ? [ ..._chats ] : [ ...chats, _chats ]\r\n    this.setState({ chats: newChats, activeChannel: init ? _chats[0] : this.state.activeChannel })\r\n  }\r\n\r\n  addTyping = ({ channel, isTyping, sender }) => {\r\n    let { user } = this.props\r\n    let { chats } = this.state\r\n    if( sender === user.nickname ) return\r\n    chats.map( chat => {\r\n      if( chat.name === channel ){\r\n        if( isTyping && !chat.typingUser.includes( sender )){\r\n          chat.typingUser.push( sender )\r\n        } else if( !isTyping && chat.typingUser.includes( sender )){\r\n          chat.typingUser = chat.typingUser.filter( u => u !== sender )\r\n        }\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ chats })\r\n  }\r\n\r\n  addPTyping = ({ channel, isTyping }) => {\r\n    console.log( channel, isTyping )\r\n    let { pChats } = this.props\r\n    pChats.map( pChat => {\r\n      if( pChat.name === channel ){\r\n        pChat.isTyping = isTyping\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ pChats })\r\n  }\r\n\r\n  addMessage = ({ channel, message }) => {\r\n    let { activeChannel, chats } = this.state\r\n\r\n    chats.map( chat => {\r\n      if( chat.name === channel ) {\r\n        chat.messages.push( message )\r\n        if ( activeChannel.name !== channel ) chat.msgCount ++\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ chats })\r\n  }\r\n\r\n  addPMessage = ({ channel, message }) => {\r\n    let { activeChannel } = this.state\r\n    let { pChats } = this.props\r\n\r\n    pChats.map( pChat => {\r\n      if( pChat.name === channel ) {\r\n        pChat.messages.push( message )\r\n        if( activeChannel.name !== channel ) pChat.msgCount ++\r\n      }\r\n      return null\r\n    })\r\n    this.setState({ pChats })\r\n  }\r\n\r\n  sendMsg = msg => {\r\n    let { socket, users  } = this.props\r\n    let { activeChannel } = this.state\r\n    if( activeChannel.type ) {\r\n      let receiver = users[ activeChannel.name ]\r\n      socket.emit( events.P_MESSAGE_SEND, { receiver, msg })\r\n    } else {\r\n      socket.emit( events.MESSAGE_SEND, { channel: activeChannel.name, msg })\r\n    }\r\n\r\n  }\r\n\r\n  sendTyping = isTyping => {\r\n    let { socket, users } = this.props\r\n    let { activeChannel } = this.state\r\n    if( activeChannel.type ){\r\n      let receiver = users[ activeChannel.name ]\r\n      socket.emit( events.P_TYPING, { receiver: receiver.socketId, isTyping })\r\n    }\r\n    socket.emit( events.TYPING, { channel: activeChannel.name, isTyping })\r\n  }\r\n\r\n  setActiveChannel = name => {\r\n    let newActive = this.state.chats.filter( chat => chat.name === name )\r\n    newActive[0].msgCount = 0\r\n    this.setState({ activeChannel: newActive[0] })\r\n  }\r\n\r\n  setActivePChannel = name => {\r\n    let newActive = this.props.pChats.filter( pChat => pChat.name === name )\r\n    newActive[0].msgCount = 0\r\n    this.setState({ activeChannel: newActive[0] })\r\n  }\r\n \r\n  render() {\r\n    let { user, users, pChats, logout, socket } = this.props\r\n    let { activeChannel, chats } = this.state\r\n    return (\r\n      <Grid style={{ height: '100vh', margin: '0px'}}>\r\n        <Grid.Column computer={4} tablet={ 4 } mobile={6} style={{ background: '#4c3c4c', height: '100%'}}>\r\n          <Sidebar\r\n            user = { user }\r\n            users = { users }\r\n            chats = { chats }\r\n            socket = { socket }\r\n            activeChannel = { activeChannel }\r\n            logout = { logout }\r\n            setActivePChannel = { this.setActivePChannel }\r\n            setActiveChannel = { this.setActiveChannel }\r\n            pChats = { pChats }\r\n          />\r\n        </Grid.Column>\r\n        <Grid.Column computer={12} tablet={ 12 } mobile={10} style={{ background: '#eee', height: '100%'}}>\r\n        {\r\n          activeChannel && (\r\n            <React.Fragment>\r\n              <MessageHeader activeChannel= { activeChannel } />\r\n              <MessagesBody \r\n                messages = { activeChannel.messages } \r\n                user={ user } \r\n                typingUser = { activeChannel.typingUser } />\r\n              <MessageInput \r\n                sendMsg = { this.sendMsg } \r\n                sendTyping = { this.sendTyping } />  \r\n            </React.Fragment>\r\n          ) \r\n        }\r\n        </Grid.Column>\r\n      </Grid>   \r\n    )\r\n  }\r\n}\r\n\r\nexport default ChatPage\r\n","import React, { Component } from 'react'\r\nimport event from  '../../events'\r\nimport { Grid, Header, Icon, Form, Message } from 'semantic-ui-react';\r\n\r\nexport class LoginPage extends Component {\r\n  state = {\r\n    nickname: '',\r\n    error: ''\r\n  }\r\n  \r\n  isvalid = ({ nickname }) => nickname\r\n\r\n  setUser = ({ user, isUser }) =>  {\r\n    if( isUser ) {\r\n      this.setState({ error: 'This nickname already taken'})\r\n    } else {\r\n      this.setState({ error : '' })\r\n      this.props.setUser( user )\r\n    }\r\n  }\r\n\r\n  handleChange = e => {\r\n    this.setState({ nickname: e.target.value })\r\n  }\r\n\r\n  \r\n  handleSubmit = () => {\r\n    let { socket } = this.props\r\n    let { nickname } = this.state\r\n    this.isvalid( this.state ) ? socket.emit( event.IS_USER, nickname, this.setUser ) :\r\n    this.setState({ error : 'Please input your nickname'})\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid\r\n        style={{ height: '100vh', padding: '0px', margin: '0px' }}\r\n        textAlign='center'\r\n        verticalAlign='middle'\r\n      >\r\n        <Grid.Column computer={ 6 } tablet={ 8 } mobile={ 14 } >\r\n          <Header as='h2' icon textAlign='center' color='blue'>\r\n            <Icon name='discussions' />\r\n            Simple Chats.\r\n          </Header>\r\n          <Form size='small' onSubmit={this.handleSubmit}>\r\n            <Form.Input \r\n              name='nickname'\r\n              type='text'\r\n              placeholder='Your nickname !'\r\n              onChange={this.handleChange}\r\n              autoFocus\r\n              icon={<Icon name='add user' link circular inverted onClick={ this.handleSubmit } />}\r\n            />\r\n            { this.state.error && (\r\n              <Message negative>{ this.state.error }</Message>\r\n            )}\r\n          </Form>\r\n        </Grid.Column>\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LoginPage\r\n","import React, { Component } from 'react'\r\nimport io from 'socket.io-client'\r\nimport events from '../events'\r\nimport ChatPage from '../components/ChatsPage/ChatPage'\r\nimport LoginPage from '../components/LoginPage/LoginPage'\r\n\r\n\r\n// ***** it will used in dev mode\r\n// const socketUrl = 'http://localhost:4000/'\r\n// in dev environment replace 4000 with the custom port specified in server/index.js\r\nconst socketUrl = 'https://chat-app-backend-six-xi.vercel.app/'\r\nexport class Main extends Component {\r\n    state = {\r\n        socket: null,\r\n        user: null,\r\n        users: {},\r\n        pChats: []\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initSocket()\r\n    }\r\n\r\n    initSocket = () => {\r\n        let socket = io( socketUrl )\r\n        this.setState({ socket })\r\n        socket.on('connect', () => console.log( 'Connected'))\r\n        socket.on( events.LOGOUT, this.setUsers( false ))\r\n        socket.on( events.NEW_USER, this.setUsers( true ))\r\n    }\r\n\r\n    setUser = user => {\r\n        let { socket } = this.state\r\n        this.setState({ user })\r\n        socket.emit( events.NEW_USER, user )\r\n    }\r\n\r\n    setUsers = isNewUsers => ({ newUsers, outUser }) => {\r\n        let { user, pChats } = this.state\r\n        if( isNewUsers ){\r\n            let newPChats = [...pChats]\r\n            let oldPChats = pChats.map( pChat => pChat.name ) \r\n            user && Object.keys( newUsers ).map( newUser => {\r\n                if( newUser !== user.nickname && !oldPChats.includes( newUser )){\r\n                    newPChats.push({\r\n                        name: newUser,\r\n                        description: 'direct message',\r\n                        messages: [],\r\n                        isTyping: false,\r\n                        msgCount: 0,\r\n                        type: 'Private'\r\n                    })\r\n                }\r\n                return null\r\n            }) \r\n            this.setState({ users : newUsers, pChats: newPChats  })\r\n        } else {\r\n            let newPChats = pChats.filter( pChat => pChat.name !== outUser )\r\n            this.setState({ users: newUsers, pChats: newPChats })\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        let { socket } = this.state\r\n        socket.emit( events.LOGOUT )\r\n        this.setState({ user: null }) \r\n    }\r\n\r\n    render() { \r\n        let { user, users, pChats, socket } = this.state\r\n        return (\r\n            user ? \r\n            <ChatPage \r\n                user = { user }\r\n                users = { users }\r\n                pChats = { pChats }\r\n                socket = { socket }\r\n                logout = { this.logout }\r\n            /> : \r\n            <LoginPage socket={socket} setUser={this.setUser} />\r\n        )\r\n    }\r\n}\r\n\r\nexport default Main\r\n","import React, { Component } from 'react';\r\nimport Main from './components/Main'\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Main />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}